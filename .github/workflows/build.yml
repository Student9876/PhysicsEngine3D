name: Build and Test PhysicsEngine3D

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            preset: linux-release
            executable_name: PhysicsEngine3D
            vcpkg_triplet: x64-linux
          - os: windows-latest
            preset: x64-release
            executable_name: PhysicsEngine3D.exe
            vcpkg_triplet: x64-windows
          - os: macos-latest
            preset: macos-release
            executable_name: PhysicsEngine3D
            vcpkg_triplet: x64-osx

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          vcpkg
          ~/.cache/vcpkg
          ~/AppData/Local/vcpkg
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json', '**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Setup dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        chmod +x scripts/powershell/setup-deps.ps1
        ./scripts/powershell/setup-deps.ps1

    - name: Setup dependencies (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x scripts/bash/setup-deps.sh
        ./scripts/bash/setup-deps.sh

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        chmod +x scripts/powershell/build.ps1
        ./scripts/powershell/build.ps1 -Preset ${{ matrix.preset }} -VcpkgTriplet ${{ matrix.vcpkg_triplet }}

    - name: Build (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x scripts/bash/build.sh
        ./scripts/bash/build.sh ${{ matrix.preset }} ${{ matrix.vcpkg_triplet }}

    - name: Test (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        chmod +x scripts/powershell/test.ps1
        ./scripts/powershell/test.ps1 -Preset ${{ matrix.preset }} -ExecutableName ${{ matrix.executable_name }}

    - name: Test (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x scripts/bash/test.sh
        ./scripts/bash/test.sh ${{ matrix.preset }} ${{ matrix.executable_name }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: PhysicsEngine3D-${{ matrix.os }}-${{ github.sha }}
        path: |
          out/build/${{ matrix.preset }}/PhysicsEngine3D/${{ matrix.executable_name }}
          out/build/${{ matrix.preset }}/**/*.dll
          out/build/${{ matrix.preset }}/**/*.so
          out/build/${{ matrix.preset }}/**/*.dylib
        retention-days: 30
        if-no-files-found: warn

    - name: Upload build logs on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-${{ matrix.os }}-${{ github.sha }}
        path: |
          out/build/${{ matrix.preset }}/CMakeCache.txt
          out/build/${{ matrix.preset }}/CMakeFiles/CMakeOutput.log
          out/build/${{ matrix.preset }}/CMakeFiles/CMakeError.log
        retention-days: 7
        if-no-files-found: ignore