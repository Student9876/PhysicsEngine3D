name: Release PhysicsEngine3D

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create release for'
        required: true
        type: string

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            preset: linux-release
            executable_name: PhysicsEngine3D
            asset_name: PhysicsEngine3D-linux-x64
            vcpkg_triplet: x64-linux
          - os: windows-latest
            preset: x64-release
            executable_name: PhysicsEngine3D.exe
            asset_name: PhysicsEngine3D-windows-x64
            vcpkg_triplet: x64-windows
          - os: macos-latest
            preset: macos-release
            executable_name: PhysicsEngine3D
            asset_name: PhysicsEngine3D-macos-x64
            vcpkg_triplet: x64-osx

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          vcpkg
          ~/.cache/vcpkg
          ~/AppData/Local/vcpkg
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json', '**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Setup dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        chmod +x scripts/powershell/setup-deps.ps1
        ./scripts/powershell/setup-deps.ps1

    - name: Setup dependencies (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x scripts/bash/setup-deps.sh
        ./scripts/bash/setup-deps.sh

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        chmod +x scripts/powershell/build.ps1
        ./scripts/powershell/build.ps1 -Preset ${{ matrix.preset }} -VcpkgTriplet ${{ matrix.vcpkg_triplet }}

    - name: Build (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x scripts/bash/build.sh
        ./scripts/bash/build.sh ${{ matrix.preset }} ${{ matrix.vcpkg_triplet }}

    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        chmod +x scripts/powershell/package.ps1
        ./scripts/powershell/package.ps1 -Preset ${{ matrix.preset }} -ExecutableName ${{ matrix.executable_name }} -AssetName ${{ matrix.asset_name }}

    - name: Package (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x scripts/bash/package.sh
        ./scripts/bash/package.sh ${{ matrix.preset }} ${{ matrix.executable_name }} ${{ matrix.asset_name }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          ${{ matrix.asset_name }}.zip
          ${{ matrix.asset_name }}.tar.gz
        retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} release-assets/ \;
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        tag_name: ${{ github.event.inputs.tag || github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-checksums:
    name: Create Checksums
    needs: release
    runs-on: ubuntu-latest
    if: always() && needs.release.result == 'success'
    
    steps:
    - name: Download Release Assets
      uses: robinraju/release-downloader@v1.8
      with:
        repository: ${{ github.repository }}
        tag: ${{ github.event.inputs.tag || github.ref_name }}
        fileName: "*"
        out-file-path: "assets"

    - name: Generate Checksums
      run: |
        cd assets
        sha256sum *.zip *.tar.gz > ../checksums.txt 2>/dev/null || sha256sum * > ../checksums.txt
        cd ..
        cat checksums.txt

    - name: Upload Checksums
      uses: softprops/action-gh-release@v1
      with:
        files: checksums.txt
        tag_name: ${{ github.event.inputs.tag || github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}