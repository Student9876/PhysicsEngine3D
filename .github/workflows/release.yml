name: Release

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create release for'
        required: true
        type: string

jobs:
  build-release:
    name: Build Release on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            preset: linux-release
            executable_name: PhysicsEngine3D
            asset_name: PhysicsEngine3D-linux-x64
          - os: windows-latest
            preset: x64-release
            executable_name: PhysicsEngine3D.exe
            asset_name: PhysicsEngine3D-windows-x64
          - os: macos-latest
            preset: macos-release
            executable_name: PhysicsEngine3D
            asset_name: PhysicsEngine3D-macos-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat

    - name: Setup vcpkg (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        ./vcpkg/bootstrap-vcpkg.sh

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Configure CMake
      run: cmake --preset ${{ matrix.preset }}

    - name: Build
      run: cmake --build out/build/${{ matrix.preset }} --config Release

    - name: Package executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir release
        copy "out\build\${{ matrix.preset }}\PhysicsEngine3D\${{ matrix.executable_name }}" release\
        7z a ${{ matrix.asset_name }}.zip release\*

    - name: Package executable (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir release
        cp out/build/${{ matrix.preset }}/PhysicsEngine3D/${{ matrix.executable_name }} release/
        chmod +x release/${{ matrix.executable_name }}
        tar -czf ${{ matrix.asset_name }}.tar.gz -C release .

    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (Linux/macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.tar.gz
        asset_name: ${{ matrix.asset_name }}.tar.gz
        asset_content_type: application/gzip

  create-checksums:
    name: Create Checksums
    needs: build-release
    runs-on: ubuntu-latest
    steps:
    - name: Download Release Assets
      uses: actions/download-release-assets@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        release-id: ${{ github.event.release.id }}

    - name: Generate Checksums
      run: |
        sha256sum * > checksums.txt

    - name: Upload Checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain